import axios from'axios';import chalk from'chalk';import*as fs from'fs/promises';import{readFile}from'fs/promises';import{dirname,join}from'path';import{fileURLToPath}from'url';import{displayBanner}from'./banner.js';class KaleidoMiningBot{constructor(a,b){this.wallet=a,this.botIndex=b,this.currentEarnings={total:0,pending:0,paid:0},this.miningState={isActive:!1,worker:"quantum-rig-1",pool:"quantum-1",startTime:null},this.referralBonus=0,this.stats={hashrate:75.5,shares:{accepted:0,rejected:0},efficiency:1.4,powerUsage:120},this.api=axios.create({baseURL:"https://kaleidofinance.xyz/api/testnet",headers:{"Content-Type":"application/json",Referer:"https://kaleidofinance.xyz/testnet","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36"}})}async initialize(){try{const a=await this.retryRequest(()=>this.api.get(`/check-registration?wallet=${this.wallet}`),"Registration check");if(!a.data.isRegistered)throw new Error("Wallet not registered");this.referralBonus=a.data.userData.referralBonus,this.currentEarnings={total:a.data.userData.referralBonus||0,pending:0,paid:0},this.miningState.startTime=Date.now(),this.miningState.isActive=!0,console.log(chalk.green(`[Wallet ${this.botIndex}] Mining initialized successfully`)),this.startMiningLoop()}catch(a){console.error(chalk.red(`[Wallet ${this.botIndex}] Initialization failed:`),a.message)}}async retryRequest(a,b,c=3){for(let d=0;d<c;d++)try{return await a()}catch(e){if(d===c-1)throw e;console.log(chalk.yellow(`[${b}] Retrying (${d+1}/${c})...`)),await new Promise(a=>setTimeout(a,2e3*(d+1)))}}calculateEarnings(){const a=(Date.now()-this.miningState.startTime)/1e3;return this.stats.hashrate*a*.0001*(1+this.referralBonus)}async updateBalance(a=!1){try{const b=this.calculateEarnings(),c={wallet:this.wallet,earnings:{total:this.currentEarnings.total+b,pending:a?0:b,paid:a?this.currentEarnings.paid+b:this.currentEarnings.paid}},d=await this.retryRequest(()=>this.api.post("/update-balance",c),"Balance update");d.data.success&&(this.currentEarnings={total:d.data.balance,pending:a?0:b,paid:a?this.currentEarnings.paid+b:this.currentEarnings.paid},this.logStatus(a))}catch(b){console.error(chalk.red(`[Wallet ${this.botIndex}] Update failed:`),b.message)}}logStatus(a=!1){const b=a?"Final Status":"Mining Status",c=((Date.now()-this.miningState.startTime)/1e3).toFixed(0);console.log(chalk.yellow(`\n=== [Wallet ${this.botIndex}] ${b} ===\nWallet: ${this.wallet}\nUptime: ${c}s | Active: ${this.miningState.isActive}\nHashrate: ${this.stats.hashrate} MH/s\nTotal: ${chalk.cyan(this.currentEarnings.total.toFixed(8))} KLDO\nPending: ${chalk.yellow(this.currentEarnings.pending.toFixed(8))} KLDO\nPaid: ${chalk.green(this.currentEarnings.paid.toFixed(8))} KLDO\nReferral Bonus: ${chalk.magenta(`+${(100*this.referralBonus).toFixed(1)}%`)}\n`))}async startMiningLoop(){for(;this.miningState.isActive;)await this.updateBalance(),await new Promise(a=>setTimeout(a,3e4))}async stop(){return this.miningState.isActive=!1,await this.updateBalance(!0),this.currentEarnings.paid}}export class MiningCoordinator{constructor(){this.bots=[],this.totalPaid=0}async loadWallets(){try{const a=dirname(fileURLToPath(import.meta.url)),b=await readFile(join(a,"wallets.txt"),"utf8");return b.split("\n").map(a=>a.trim()).filter(a=>a.startsWith("0x"))}catch(a){return console.error("Error loading wallets:",a.message),[]}}async start(){displayBanner();const a=await this.loadWallets();if(0===a.length)return void console.log(chalk.red("No valid wallets found in wallets.txt"));console.log(chalk.blue(`Loaded ${a.length} wallets\n`)),this.bots=a.map((a,b)=>{const c=new KaleidoMiningBot(a,b+1);return c.initialize(),c}),process.on("SIGINT",async()=>{console.log(chalk.yellow("\nShutting down miners...")),this.totalPaid=(await Promise.all(this.bots.map(a=>a.stop()))).reduce((a,b)=>a+b,0),console.log(chalk.green(`\n=== Final Summary ===\nTotal Wallets: ${this.bots.length}\nTotal Paid: ${this.totalPaid.toFixed(8)} KLDO\n`)),process.exit()})}}new MiningCoordinator().start().catch(console.error);
